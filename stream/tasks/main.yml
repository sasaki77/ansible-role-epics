- name: main / install pexpect for expect module
  pip:
    name: pexpect
  become: true

- name: main / Make module dir
  file:
    path: "{{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}"
    state: directory
    owner: "{{ epics_base_owner }}"
    group: "{{ epics_base_group }}"
    mode: 0755

- name: main / MakeBaseApp
  expect:
    command: "{{ epics_base_base_name }}/bin/{{ epics_base_epics_host_arch }}/makeBaseApp.pl -t support"
    chdir: "{{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}"
    responses:
      Application names?: ""

- name: main / Chack module exists
  stat: path={{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}/{{ epics_stream_unarchived_name }}
  register: module_exists

- name: main / Download module src
  unarchive:
    src: "{{ epics_stream_url }}"
    dest: "{{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}"
    owner: "{{ epics_base_owner }}"
    group: "{{ epics_base_group }}"
    remote_src: True
  when: not module_exists.stat.exists

- name: main / Copy RELEASE.local file
  template:
    src: "RELEASE.j2"
    dest: "{{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}/configure/RELEASE.local"
    owner: "{{ epics_base_owner }}"
    group: "{{ epics_base_group }}"
    mode: 0664

- name: main / rm GNUmakefile
  file: 
    state: absent
    path: "{{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}/{{ epics_stream_unarchived_name }}/GNUmakefile"

- name: main / Make epics module
  make:
    chdir: "{{ epics_base_modules_name }}/soft/stream/{{ epics_stream_ver }}/{{ epics_stream_unarchived_name }}"
  environment:
    EPICS_HOST_ARCH: "{{ epics_base_epics_host_arch }}"
  become: true
  become_user: "{{ epics_base_owner }}"
